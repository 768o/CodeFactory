[{"Id":"76ca098f-bcac-434e-8576-6fa5d505b152","PathId":"af25e02c-003b-499e-8710-63b0d4096c72","Title":"ICurdSvc","Context":"<pre><code class=\"C#\">    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> ICrudSvc%@#;TEntity&gt; : IBaseService\n    {\n        Task%@#;ApiResponse%@#;<span class=\"hljs-keyword\">bool</span>&gt;&gt; DeleteAsync%@#;TDeleteReq&gt;(TDeleteReq req);\n\n        Task%@#;ApiResponse%@#;<span class=\"hljs-keyword\">bool</span>&gt;&gt; DeleteAsync(TEntity entity);\n\n        Task%@#;ApiResponse%@#;TEntityOutput&gt;&gt; GetAsync%@#;TEntityOutput&gt;(<span class=\"hljs-keyword\">object</span> id)\n            <span class=\"hljs-keyword\">where</span> TEntityOutput : <span class=\"hljs-keyword\">new</span>();\n\n        Task%@#;ApiResponse%@#;TEntity&gt;&gt; GetAsync(<span class=\"hljs-keyword\">object</span> id);\n\n        Task%@#;ApiResponse%@#;PageOutPut%@#;List%@#;TGetListPagedOutput&gt;&gt;&gt;&gt; GetListPagedAsync%@#;TGetListPageReq, TGetListPagedOutput&gt;(TGetListPageReq req)\n            <span class=\"hljs-keyword\">where</span> TGetListPageReq : PageRepoReq\n            <span class=\"hljs-keyword\">where</span> TGetListPagedOutput : <span class=\"hljs-keyword\">new</span>();\n\n        Task%@#;ApiResponse%@#;PageOutPut%@#;List%@#;TEntity&gt;&gt;&gt;&gt; GetListPagedAsync%@#;TGetListPageReq&gt;(TGetListPageReq req)\n            <span class=\"hljs-keyword\">where</span> TGetListPageReq : PageRepoReq;\n\n        Task%@#;ApiResponse%@#;<span class=\"hljs-keyword\">bool</span>&gt;&gt; InsertAsync%@#;TInsertReq&gt;(TInsertReq req);\n\n        Task%@#;ApiResponse%@#;<span class=\"hljs-keyword\">bool</span>&gt;&gt; InsertAsync(TEntity entity);\n\n        Task%@#;ApiResponse%@#;<span class=\"hljs-keyword\">bool</span>&gt;&gt; UpdateAsync%@#;TUpdateReq&gt;(TUpdateReq req);\n\n        Task%@#;ApiResponse%@#;<span class=\"hljs-keyword\">bool</span>&gt;&gt; UpdateAsync(TEntity entity);\n    }</code></pre>"},{"Id":"e6f91afa-4e5d-4504-ab4e-27d071945c2f","PathId":"af25e02c-003b-499e-8710-63b0d4096c72","Title":"CurdSvc","Context":"<pre><code class=\"C#\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> CrudSvc%@#;TEntity&gt; : ICrudSvc%@#;TEntity&gt;\n        <span class=\"hljs-keyword\">where</span> TEntity : <span class=\"hljs-title\">new</span>()\n    {\n        <span class=\"hljs-keyword\">private</span> IRepository%@#;TEntity&gt; _repository;\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> ILogger _logger;\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">CrudSvc</span>(IRepository%@#;TEntity&gt; repository, ILoggerFactory loggerFactory)\n        {\n            _repository = repository;\n            _logger = loggerFactory.CreateLogger%@#;CrudSvc%@#;TEntity&gt;&gt;();\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">async</span> Task%@#;ApiResponse%@#;PageOutPut%@#;List%@#;TGetListPagedOutput&gt;&gt;&gt;&gt; GetListPagedAsync%@#;TGetListPageReq, TGetListPagedOutput&gt;(TGetListPageReq req)\n            <span class=\"hljs-keyword\">where</span> TGetListPageReq : PageRepoReq\n            <span class=\"hljs-keyword\">where</span> TGetListPagedOutput : <span class=\"hljs-title\">new</span>()\n        {\n            <span class=\"hljs-keyword\">var</span> pageResult = <span class=\"hljs-keyword\">await</span> GetListPagedAsync%@#;TGetListPageReq&gt;(req);\n            <span class=\"hljs-keyword\">if</span> (pageResult.Code != ApiReturnCode.Succeed)\n            {\n                <span class=\"hljs-keyword\">return</span> ApiResponse%@#;PageOutPut%@#;List%@#;TGetListPagedOutput&gt;&gt;&gt;.GetFail(pageResult.Code, pageResult.Msg);\n            }\n            <span class=\"hljs-keyword\">else</span>\n            {\n                <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">new</span> PageOutPut%@#;List%@#;TGetListPagedOutput&gt;&gt;(pageResult.Data.Total, <span class=\"hljs-keyword\">new</span> List%@#;TGetListPagedOutput&gt;());\n                <span class=\"hljs-keyword\">try</span>\n                {\n                    result.List = pageResult.Data.List.Select(d =&gt; MapTo%@#;TEntity, TGetListPagedOutput&gt;(d)).ToList();\n                }\n                <span class=\"hljs-keyword\">catch</span> (Exception ex)\n                {\n                    _logger.LogError(ex, <span class=\"hljs-string\">\"Crud列表数据映射失败\"</span>);\n                    <span class=\"hljs-keyword\">return</span> ApiResponse%@#;PageOutPut%@#;List%@#;TGetListPagedOutput&gt;&gt;&gt;.GetFail(ApiReturnCode.SystemError, <span class=\"hljs-string\">\"列表数据映射失败\"</span>);\n                }\n\n                <span class=\"hljs-keyword\">return</span> ApiResponse%@#;PageOutPut%@#;List%@#;TGetListPagedOutput&gt;&gt;&gt;.GetSucceed(result);\n            }\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">async</span> Task%@#;ApiResponse%@#;PageOutPut%@#;List%@#;TEntity&gt;&gt;&gt;&gt; GetListPagedAsync%@#;TGetListPageReq&gt;(TGetListPageReq req)\n            <span class=\"hljs-keyword\">where</span> TGetListPageReq : PageRepoReq\n        {\n            <span class=\"hljs-keyword\">try</span>\n            {\n                <span class=\"hljs-keyword\">var</span> <span class=\"hljs-keyword\">where</span> = GetListPagedBuilderWhere(req);\n                <span class=\"hljs-keyword\">var</span> orderBy = GetListPagedBuilderOrderBy(req);\n                <span class=\"hljs-keyword\">var</span> pageList = <span class=\"hljs-keyword\">await</span> _repository.GetListPagedAsync(req.PageIndex, req.PageSize, <span class=\"hljs-keyword\">where</span>, orderBy, req);\n\n                <span class=\"hljs-keyword\">var</span> type = <span class=\"hljs-keyword\">typeof</span>(TEntity);\n                <span class=\"hljs-keyword\">var</span> tableName = type.Name;\n                <span class=\"hljs-keyword\">var</span> tableattr = type.GetCustomAttributes(<span class=\"hljs-keyword\">true</span>).SingleOrDefault(attr =&gt; attr.GetType().Name == <span class=\"hljs-keyword\">typeof</span>(TableAttribute).Name) <span class=\"hljs-keyword\">as</span> dynamic;\n                <span class=\"hljs-keyword\">if</span> (tableattr != <span class=\"hljs-keyword\">null</span>)\n                {\n                    tableName = tableattr.Name;\n                }\n\n                <span class=\"hljs-keyword\">var</span> sql = $<span class=\"hljs-string\">\"SELECT count(1) from {tableName} {where}\"</span>;\n\n                <span class=\"hljs-keyword\">var</span> total = <span class=\"hljs-keyword\">await</span> _repository.QueryFirstOrDefaultAsync%@#;<span class=\"hljs-keyword\">int</span>&gt;(sql, req);\n                <span class=\"hljs-keyword\">var</span> page = <span class=\"hljs-keyword\">new</span> PageOutPut%@#;List%@#;TEntity&gt;&gt;(total, pageList.ToList());\n                <span class=\"hljs-keyword\">return</span> ApiResponse%@#;PageOutPut%@#;List%@#;TEntity&gt;&gt;&gt;.GetSucceed(page);\n            }\n            <span class=\"hljs-keyword\">catch</span> (Exception ex)\n            {\n                _logger.LogError(ex, <span class=\"hljs-string\">\"Crud列表数据获取失败\"</span>);\n                <span class=\"hljs-keyword\">return</span> ApiResponse%@#;PageOutPut%@#;List%@#;TEntity&gt;&gt;&gt;.GetFail(ApiReturnCode.SystemError, <span class=\"hljs-string\">\"列表数据获取失败\"</span>);\n            }\n        }\n\n        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">string</span> <span class=\"hljs-title\">GetListPagedBuilderWhere</span>(dynamic d)\n        {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">string</span>.Empty;\n        }\n\n        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">string</span> GetListPagedBuilderOrderBy%@#;TGetListPageReq&gt;(TGetListPageReq req)\n            <span class=\"hljs-keyword\">where</span> TGetListPageReq : PageRepoReq\n        {\n            <span class=\"hljs-keyword\">var</span> field = <span class=\"hljs-string\">\"Id\"</span>;\n            <span class=\"hljs-keyword\">if</span> (req.SortField.IsNotNullOrWhiteSpace())\n            {\n                field = req.SortField;\n            }\n\n            <span class=\"hljs-keyword\">var</span> sort = <span class=\"hljs-string\">\"asc\"</span>;\n            <span class=\"hljs-keyword\">if</span> (req.SortType == <span class=\"hljs-number\">0</span>)\n            {\n                sort = <span class=\"hljs-string\">\"desc\"</span>;\n            }\n\n            <span class=\"hljs-keyword\">return</span> $<span class=\"hljs-string\">\"{field} {sort}\"</span>;\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">async</span> Task%@#;ApiResponse%@#;TEntityOutput&gt;&gt; GetAsync%@#;TEntityOutput&gt;(<span class=\"hljs-keyword\">object</span> id)\n            <span class=\"hljs-keyword\">where</span> TEntityOutput : <span class=\"hljs-title\">new</span>()\n        {\n            <span class=\"hljs-keyword\">var</span> entity = <span class=\"hljs-keyword\">await</span> _repository.GetAsync(id);\n            TEntityOutput output;\n            <span class=\"hljs-keyword\">try</span>\n            {\n                output = MapTo%@#;TEntity, TEntityOutput&gt;(entity);\n            }\n            <span class=\"hljs-keyword\">catch</span> (Exception ex)\n            {\n                _logger.LogError(ex, <span class=\"hljs-string\">\"Crud数据映射失败\"</span>);\n                <span class=\"hljs-keyword\">return</span> ApiResponse%@#;TEntityOutput&gt;.GetFail(ApiReturnCode.SystemError, <span class=\"hljs-string\">\"数据映射失败\"</span>);\n            }\n\n            <span class=\"hljs-keyword\">return</span> ApiResponse%@#;TEntityOutput&gt;.GetSucceed(output);\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">async</span> Task%@#;ApiResponse%@#;TEntity&gt;&gt; <span class=\"hljs-title\">GetAsync</span>(<span class=\"hljs-keyword\">object</span> id)\n        {\n            <span class=\"hljs-keyword\">try</span>\n            {\n                <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">await</span> _repository.GetAsync(id);\n                <span class=\"hljs-keyword\">return</span> ApiResponse%@#;TEntity&gt;.GetSucceed(result);\n            }\n            <span class=\"hljs-keyword\">catch</span> (Exception ex)\n            {\n                _logger.LogError(ex, <span class=\"hljs-string\">\"Crud数据获取失败\"</span>);\n                <span class=\"hljs-keyword\">return</span> ApiResponse%@#;TEntity&gt;.GetFail(ApiReturnCode.SystemError, <span class=\"hljs-string\">\"数据获取失败\"</span>);\n            }\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">async</span> Task%@#;ApiResponse%@#;<span class=\"hljs-keyword\">bool</span>&gt;&gt; InsertAsync%@#;TInsertReq&gt;(TInsertReq req)\n        {\n            TEntity entity;\n            <span class=\"hljs-keyword\">try</span>\n            {\n                entity = MapTo%@#;TInsertReq, TEntity&gt;(req);\n            }\n            <span class=\"hljs-keyword\">catch</span> (Exception ex)\n            {\n                _logger.LogError(ex, <span class=\"hljs-string\">\"Crud数据映射失败\"</span>);\n                <span class=\"hljs-keyword\">return</span> ApiResponse%@#;<span class=\"hljs-keyword\">bool</span>&gt;.GetFail(ApiReturnCode.SystemError, <span class=\"hljs-string\">\"数据映射失败\"</span>);\n            }\n\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> InsertAsync(entity);\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">async</span> Task%@#;ApiResponse%@#;<span class=\"hljs-keyword\">bool</span>&gt;&gt; <span class=\"hljs-title\">InsertAsync</span>(TEntity entity)\n        {\n            <span class=\"hljs-keyword\">try</span>\n            {\n                <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">await</span> _repository.AddAsync(entity);\n                <span class=\"hljs-keyword\">return</span> ApiResponse%@#;<span class=\"hljs-keyword\">bool</span>&gt;.GetSucceed(result);\n            }\n            <span class=\"hljs-keyword\">catch</span> (Exception ex)\n            {\n                _logger.LogError(ex, <span class=\"hljs-string\">\"Crud数据添加失败\"</span>);\n                <span class=\"hljs-keyword\">return</span> ApiResponse%@#;<span class=\"hljs-keyword\">bool</span>&gt;.GetFail(ApiReturnCode.SystemError, <span class=\"hljs-string\">\"数据添加失败\"</span>);\n            }\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">async</span> Task%@#;ApiResponse%@#;<span class=\"hljs-keyword\">bool</span>&gt;&gt; UpdateAsync%@#;TUpdateReq&gt;(TUpdateReq req)\n        {\n            TEntity entity;\n            <span class=\"hljs-keyword\">try</span>\n            {\n                entity = MapTo%@#;TUpdateReq, TEntity&gt;(req);\n            }\n            <span class=\"hljs-keyword\">catch</span> (Exception ex)\n            {\n                _logger.LogError(ex, <span class=\"hljs-string\">\"Crud数据映射失败\"</span>);\n                <span class=\"hljs-keyword\">return</span> ApiResponse%@#;<span class=\"hljs-keyword\">bool</span>&gt;.GetFail(ApiReturnCode.SystemError, <span class=\"hljs-string\">\"数据映射失败\"</span>);\n            }\n\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> UpdateAsync(entity);\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">async</span> Task%@#;ApiResponse%@#;<span class=\"hljs-keyword\">bool</span>&gt;&gt; <span class=\"hljs-title\">UpdateAsync</span>(TEntity entity)\n        {\n            <span class=\"hljs-keyword\">try</span>\n            {\n                <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">await</span> _repository.UpdateAsync(entity);\n                <span class=\"hljs-keyword\">return</span> ApiResponse%@#;<span class=\"hljs-keyword\">bool</span>&gt;.GetSucceed(result);\n            }\n            <span class=\"hljs-keyword\">catch</span> (Exception ex)\n            {\n                _logger.LogError(ex, <span class=\"hljs-string\">\"Crud数据更新失败\"</span>);\n                <span class=\"hljs-keyword\">return</span> ApiResponse%@#;<span class=\"hljs-keyword\">bool</span>&gt;.GetFail(ApiReturnCode.SystemError, <span class=\"hljs-string\">\"数据更新失败\"</span>);\n            }\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">async</span> Task%@#;ApiResponse%@#;<span class=\"hljs-keyword\">bool</span>&gt;&gt; DeleteAsync%@#;TDeleteReq&gt;(TDeleteReq req)\n        {\n            TEntity entity;\n            <span class=\"hljs-keyword\">try</span>\n            {\n                entity = MapTo%@#;TDeleteReq, TEntity&gt;(req);\n            }\n            <span class=\"hljs-keyword\">catch</span> (Exception ex)\n            {\n                _logger.LogError(ex, <span class=\"hljs-string\">\"Crud数据映射失败\"</span>);\n                <span class=\"hljs-keyword\">return</span> ApiResponse%@#;<span class=\"hljs-keyword\">bool</span>&gt;.GetFail(ApiReturnCode.SystemError, <span class=\"hljs-string\">\"数据映射失败\"</span>);\n            }\n\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> DeleteAsync(entity);\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">async</span> Task%@#;ApiResponse%@#;<span class=\"hljs-keyword\">bool</span>&gt;&gt; <span class=\"hljs-title\">DeleteAsync</span>(TEntity entity)\n        {\n            <span class=\"hljs-keyword\">try</span>\n            {\n                <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">await</span> _repository.DeleteAsync(entity);\n                <span class=\"hljs-keyword\">return</span> ApiResponse%@#;<span class=\"hljs-keyword\">bool</span>&gt;.GetSucceed(result);\n            }\n            <span class=\"hljs-keyword\">catch</span> (Exception ex)\n            {\n                _logger.LogError(ex, <span class=\"hljs-string\">\"Crud数据删除失败\"</span>);\n                <span class=\"hljs-keyword\">return</span> ApiResponse%@#;<span class=\"hljs-keyword\">bool</span>&gt;.GetFail(ApiReturnCode.SystemError, <span class=\"hljs-string\">\"数据删除失败\"</span>);\n            }\n        }\n\n        <span class=\"hljs-keyword\">private</span> T MapTo%@#;TF, T&gt;(TF <span class=\"hljs-keyword\">from</span>)\n            <span class=\"hljs-keyword\">where</span> T : <span class=\"hljs-title\">new</span>()\n        {\n            <span class=\"hljs-keyword\">var</span> typeFrom = <span class=\"hljs-keyword\">from</span>.GetType();\n            <span class=\"hljs-keyword\">var</span> typedTo = <span class=\"hljs-keyword\">typeof</span>(T);\n            <span class=\"hljs-keyword\">var</span> to = <span class=\"hljs-keyword\">new</span> T();\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> f <span class=\"hljs-keyword\">in</span> typeFrom.GetProperties())\n            {\n                <span class=\"hljs-keyword\">try</span>\n                {\n                    <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> t <span class=\"hljs-keyword\">in</span> typedTo.GetProperties())\n                    {\n                        <span class=\"hljs-keyword\">if</span> (t.Name == f.Name &amp;&amp; t.PropertyType == f.PropertyType)\n                        {\n                            t.SetValue(to, f.GetValue(<span class=\"hljs-keyword\">from</span>, <span class=\"hljs-keyword\">null</span>), <span class=\"hljs-keyword\">null</span>);\n                        }\n                    }\n                }\n                <span class=\"hljs-keyword\">catch</span> (Exception ex)\n                {\n                    Console.WriteLine(ex);\n                    <span class=\"hljs-keyword\">throw</span>;\n                }\n            }\n\n            <span class=\"hljs-keyword\">return</span> to;\n        }\n    }</code></pre>"}]
